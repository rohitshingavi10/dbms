3. Insert 10 documents with above mentioned structure
db.Students.insertMany([
  {
    RollNo: 1,
    StudentName: "John",
    Age: 20,
    Branch: "Computer",
    Address: { City: "Pune", State: "Maharashtra" },
    Hobbies: ["Reading", "Gaming"],
  },
  {
    RollNo: 2,
    StudentName: "Alice",
    Age: 18,
    Branch: "Electrical",
    Address: { City: "Mumbai", State: "Maharashtra" },
    Hobbies: ["Painting", "Swimming"],
  },
  {
    RollNo: 3,
    StudentName: "Bob",
    Age: 22,
    Branch: "Mechanical",
    Address: { City: "Pune", State: "Maharashtra" },
    Hobbies: ["Music", "Cooking"],
  },
  // Add more documents for a total of 10
]);

4. Display all studentsâ€™ information
db.Students.find();

5.Display student information whose age is greater than 15:
db.Students.find({ Age: { $gt: 15 } });

6.Display student information sorted on the name field:
db.Students.find().sort({ StudentName: 1 }); // 1 for ascending, -1 for descending

7.Update student branch to "Computer" for RollNo 3:
db.Students.updateOne({ RollNo: 3 }, { $set: { Branch: "Computer" } });
 
8.Remove the document with RollNo 1:
db.Students.deleteOne({ RollNo: 1 });

9.Display student information whose name starts with 'A':
db.Students.find({ StudentName: /^A/ }); // Uses a regular expression to match names starting with 'A'

10.Display the total number of documents available in the collection:
db.Students.count();

11.Display only the first 5 documents:
db.Students.find().limit(5);

12.Display all documents except the first 3:
db.Students.find().skip(3);

13.Display the names of students who live in Pune City:
db.Students.find({ "Address.City": "Pune" }, { StudentName: 1, _id: 0 });

14.Display only the names of all students:
db.Students.find({}, { StudentName: 1, _id: 0 });

15.Drop the Students collection:
db.Students.drop();

